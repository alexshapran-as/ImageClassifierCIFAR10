from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import SGD
import tensorflow as tf
import numpy as np
import time


def cifar10_model():
  model = Sequential()
  model.add(Conv2D(32, (3, 3), padding='same',
    activation='relu', input_shape=(32, 32, 3)))
  model.add(Conv2D(32, (3, 3), activation='relu'))
  model.add(MaxPooling2D(pool_size=(2, 2)))
  model.add(Dropout(0.25))
  model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))
  model.add(Conv2D(64, (3, 3), activation='relu'))
  model.add(MaxPooling2D(pool_size=(2, 2)))
  model.add(Dropout(0.25))
  model.add(Flatten())
  model.add(Dense(512, activation='relu'))
  model.add(Dropout(0.5))
  model.add(Dense(10, activation='softmax'))
  model.compile(loss='categorical_crossentropy',
    optimizer=SGD(lr=.1, momentum=0.9, nesterov=True),
    metrics=['accuracy'])
  return model

def cifar10_train(model):
  (x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()
  y_train = keras.utils.to_categorical(y_train, 10)
  y_test = keras.utils.to_categorical(y_test, 10)
  x_train = x_train.astype('float32')
  x_test = x_test.astype('float32')
  x_train /= 255.0
  x_test /= 255.0

  def scheduler(epoch):
    if epoch < 30:
      return 0.01
    if epoch < 50:
      return 0.001
    return 0.0001

  change_lr = keras.callbacks.LearningRateScheduler(scheduler)

  t_start = time.time()

  # randomly rotate images in the range (degrees, 0 to 180)
  datagen = keras.preprocessing.image.ImageDataGenerator(rotation_range=0,
    # randomly shift images horizontally (fraction of total width)
    width_shift_range=0.1,
    # randomly shift images vertically (fraction of total height)
    height_shift_range=0.1,
    # randomly flip images
    horizontal_flip=True,
    # randomly flip images
    vertical_flip=False)

  # Compute quantities required for feature-wise normalization
  # (std, mean, and principal components if ZCA whitening is applied).
  datagen.fit(x_train)

  # Fit the model on the batches generated by datagen.flow().
  model.fit_generator(datagen.flow(x_train, y_train, batch_size=128),
    epochs=60, callbacks=[change_lr],
    validation_data=(x_test, y_test))
  print("Training done, dT:", time.time() - t_start)

def cifar10_predict(model, image_file):
  labels = ["airplane", "automobile", "bird", "cat",
    "deer", "dog", "frog", "horse", "ship"]

  img = keras.preprocessing.image.load_img(image_file, target_size=(32, 32))
  img_arr = np.expand_dims(img, axis=0) / 255.0
  result = model.predict_classes(img_arr)
  print("Result: {}".format(labels[result[0]]))

def main():
  choise = int(input(
        "---------------------------------\n"
        "Image classifier based on CIFAR10\n"
        "---------------------------------\n"
        "Supported classes: airplane, automobile, bird, cat, deer, dog, frog, horse, ship\n"
        "Choose:\n"
        "[1]: create and train model\n"
        "[2]: classify image\n"
  ))
  if(choise == 1):
    model = cifar10_model()
    cifar10_train(model)
    model.save('cifar10_32x32.h5')
  elif(choise == 2):
    img_path = input("Path to the image: ")
    model = tf.keras.models.load_model('cifar10_32x32.h5')
    cifar10_predict(model, img_path)
  else:
    print("Bye!")

if __name__ == '__main__':
  main()